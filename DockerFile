Docker is build in layers
  - OS
  - Change in apt packages
  - Change in pip packages
  - Source code
  - Update entrypoint in 'flask' command
  
  
When an execution fails in Layer3, Only the layer below that will re-run. Others will be taken from the cache.

https://github.com/mmumshad/simple-webapp


docker run -it ubuntu bash
  run and connect to the container

apt-get update

apt-get install -y python3

apt-get install -y python3-pip

pip install flask

pip install flask-mysql

cat > /opt/app.py
  - copy the cource code
  
FLASK_APP=app.py flask run --host=0.0.0.0
  - from the /opt folder
  
Map the port so that we cna access this app from the web browser of the laptop. without this mapping, we can access the app only from the VM's web browser and not the system's.


======================

create DockerFile - builds an image which can be published in docker hub

1. write down all the instructions in notepad
#create app.py in the same folder wherr you have Dockerfile

FROM ubuntu

RUN apt-get update
RUN apt-get install -y python3
RUN apt-get install -y python3-pip
RUN pip install flask

COPY app.py /opt/app.py

ENTRYPOINT FLASK_APP=app.py flask run --host=0.0.0.0

=======================

docker build .
docker build . -t my-simple-webapp    #give a tag for the image

docker build . -t valar/my-simple-webapp  #create an image out of this and only that can be pushed to docker hub.

docker push valar/my-simple-webapp

=======================

#containerize the app

FROM python:3.6

RUN pip install flask

COPY . /opt/

EXPOSE 8080

WORKDIR /opt

ENTRYPOINT ["python", "app.py"]

==================================================


docker run -p 8282:8080 webapp-color --color=red
==================================================
from flask import Flask
from flask import render_template
import socket
import random
import os
import argparse

app = Flask(__name__)

color_codes = {
    "red": "#e74c3c",
    "green": "#16a085",
    "blue": "#2980b9",
    "blue2": "#30336b",
    "pink": "#be2edd",
    "darkblue": "#130f40"
}

SUPPORTED_COLORS = ",".join(color_codes.keys())

# Get color from Environment variable
COLOR_FROM_ENV = os.environ.get('APP_COLOR')
# Generate a random color
COLOR = random.choice(["red", "green", "blue", "blue2", "darkblue", "pink"])


@app.route("/")
def main():
    # return 'Hello'
    return render_template('hello.html', name=socket.gethostname(), color=color_codes[COLOR])


if __name__ == "__main__":

    print(" This is a sample web application that displays a colored background. \n"
          " A color can be specified in two ways. \n"
          "\n"
          " 1. As a command line argument with --color as the argument. Accepts one of " + SUPPORTED_COLORS + " \n"
          " 2. As an Environment variable APP_COLOR. Accepts one of " + SUPPORTED_COLORS + " \n"
          " 3. If none of the above then a random color is picked from the above list. \n"
          " Note: Command line argument precedes over environment variable.\n"
          "\n"
          "")

    # Check for Command Line Parameters for color
    parser = argparse.ArgumentParser()
    parser.add_argument('--color', required=False)
    args = parser.parse_args()

    if args.color:
        print("Color from command line argument =" + args.color)
        COLOR = args.color
        if COLOR_FROM_ENV:
            print("A color was set through environment variable -" + COLOR_FROM_ENV + ". However, color from command line argument takes precendence.")
    elif COLOR_FROM_ENV:
        print("No Command line argument. Color from environment variable =" + COLOR_FROM_ENV)
        COLOR = COLOR_FROM_ENV
    else:
        print("No command line argument or environment variable. Picking a Random Color =" + COLOR)

    # Check if input color is a supported one
    if COLOR not in color_codes:
        print("Color not supported. Received '" + COLOR + "' expected one of " + SUPPORTED_COLORS)
        exit(1)

    # Run Flask Application
    app.run(host="0.0.0.0", port=8080)
    
    
    ==================================
    Find the OS where container app is running
    
    docker run python:3.6 cat /etc/*release*
    
    ==================================
    
    Containers are not meant to run OS & it is meant to run app
    
    name of image = webapp-color
    tag of image = lite
    
    docker build -t webapp-color:lite .
    
    docker run -p 8383:8080 webapp-color:lite
    docker run -p 8383:8080 webapp-color:lite --color=green
    
    #configure env variables
    export APP_COLOR=blue
    #update env variables while running
    docker run -e APP_COLOR=blue -p 8383:8080 webapp-color:lite 
    
    docker inspect <container-id> --> to get all the env variables configured in container in the config section.
    
    docker run  -e APP_COLOR=blue -p 38282:8080 kodekloud/simple-webapp --name blue-app
    
    docker run --name mysql-db -e MYSQL_ROOT_PASSWORD=db_pass123 -d mysql

docker attach 102bcebf8526
    
     ==================================
     
     
     
     FROM ubuntu
     CMD sleep 5
     CMD ["sleep","5"] //add list of arguments
     ========================================
     
     ENTRYPOINT ["sleep"]
     
     docker run ubuntu-sleeper 10 --> the command will be sleep 10. entrypoint + cmd-line-arg-value
     ========================================
     ENTRYPOINT ["sleep"]
     CMD ["5"]
     
     docker run ubuntu-sleeper --> the command will be "sleep 5". entrypoint + default-cmd-value. for default value, only json format arg are expected for entrypoint and cmd
     docker run ubuntu-sleeper 15 --> the command will be "sleep 15"
     ========================================
     Override entrypoint command
     
     docker run --entrypoint sleep2.0 ubuntu-sleeper 15   --> instead of sleep command sleep2.0 will be used
     
     
     
     
